class r{static name="building_compare";constructor(a,t){this.data={buildingIds:[],dataPromises:[]}}async onAdd(a,t){}async onRemove(a,t){await this.removeOldCharts(a,t,this.data.buildingIds)}async updateData(a,t,i){i.buildingIds&&(await this.removeOldCharts(a,t,this.data.buildingIds),this.data.buildingIds=i.buildingIds,await this.addCharts(a,t,this.data.buildingIds))}async removeOldCharts(a,t,i){for(let d in i)if(parseInt(d)!==0){let s=i[d];await a.dispatch(t.getters.path+"/unloadChart",s)}}async addCharts(a,t,i){let d=[];for(let s in i)if(parseInt(s)!==0){let e=i[s],l=a.getters[a.getters["map/building"](e).path+"/primaryGroup"]("Electricity").id;d.push({id:e,name:this.buildingName(a,e),point:"accumulated_real",meters:l})}await a.dispatch(t.getters.path+"/loadCharts",d)}async preData(a,t,i){}buildingName(a,t){return a.getters[a.getters["map/building"](t).path+"/name"]}async postData(a,t,i){this.data.buildingIds[0]&&(i.datasets[0].label=this.buildingName(a,this.data.buildingIds[0]))}}export{r as default};
