/**
 * @Author: Milan Donhowe
 * @Email: Milan.Donhowe@oregosntate.edu
 * @Date Created:       4/20/2021
 * @Date Last Modified: 4/23/2021
 * @Description: Vue Component Unit Test for BuildingList.vue
 */

// For mocking API
// Import Vue Test Utils
import { mount, createLocalVue } from '@vue/test-utils'
import Vuex from 'vuex'
import { cloneDeep } from 'lodash'

// Import Relevant Vuex Store Modules
import { StoreConfig } from '@/store/index'
import EDMap from '@/store/map.module.js'
import ModalController from '@/store/modal_controller.module.js'

// Mock Data
import mockAllBuildings from '../../assertedData/mock_allbuildings.json'

// Import Elements UI (since this component uses Elements-UI)
import elm from 'element-ui'
import locale from 'element-ui/lib/locale/lang/en'

// The Component Itself
import buildingList from '@/components/BuildingList/BuildingList.vue'

const axios = require('axios')

jest.mock('axios')

// Mock Vue Router object
const $route = {
  path: '/buildings',
  hash: '',
  params: { group: undefined }
}

// Create local vue instance w/ elements ui plugin.
const localVue = createLocalVue()
localVue.use(Vuex)
localVue.use(elm, { locale: locale })
localVue.config.lang = 'en'

// SCRIPT-WIDE CONSTANTS
// Unforunately, these selectors get generated by
// elements-ui so there is a chance if we update
// to a new version they may change.
const TAB_SELECTOR = 'div.el-tabs__item'
const PANE_SELECTOR = 'div.el-tab-pane'

// Create Vuex Store instance
const localStore = new Vuex.Store(
  cloneDeep({
    ...StoreConfig,
    modules: {
      map: EDMap,
      modalController: ModalController
    }
  })
)

describe('Testing Building List Component', () => {
  it('Loading associated store', async () => {
    axios.mockResolvedValue({ data: mockAllBuildings })
    return localStore.dispatch('map/loadMap')
  })

  /* Load Component w/ router mock, local vue & vuex instances */
  const ComponentWrapper = mount(buildingList, {
    localVue,
    mocks: {
      $route,
      $store: localStore
    }
  })

  it('Renders building names on mount', async () => {
    const textContent = ComponentWrapper.text()
    for (let building of mockAllBuildings) {
      if (!building.hidden) expect(textContent).toMatch(building.name)
    }
  })

  it('Testing building filter', async () => {
    const Tabs = ComponentWrapper.findAll(TAB_SELECTOR)
    const Panes = ComponentWrapper.findAll(PANE_SELECTOR)

    // Each tab has one corresponding pane.
    expect(Tabs.length).toEqual(Panes.length)

    for (let tabIndex = 0; tabIndex < Tabs.length; tabIndex++) {
      const Tab = Tabs.at(tabIndex)
      const selector = Tab.text().trim()

      if (selector !== 'All') {
        await Tab.trigger('click')

        // Grab the visible pane
        let matchingPane = Panes.filter(wrapper => wrapper.isVisible())

        // We should find only one visible pane with valid id
        expect(matchingPane.length).toEqual(1)
        matchingPane = matchingPane.at(0)
        expect(matchingPane.attributes('id')).toEqual(`pane-${selector}`)

        // Make sure the visible pane is displaying the correct building names
        const matchedBuildings = mockAllBuildings.filter(b => b.group === selector && !b.hidden).map(b => b.name)
        for (let building of mockAllBuildings) {
          if (matchedBuildings.includes(building.name)) {
            expect(matchingPane.text()).toMatch(building.name)
          } else {
            expect(matchingPane.text()).not.toMatch(building.name)
          }
        }
      }
    }
  })
})
