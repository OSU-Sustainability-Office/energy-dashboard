AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Energy Dashboard

  Backend routes used by the OSU Energy Dashboard

Globals:
  Function:
    Timeout: 15
    Runtime: nodejs12.x
  Api:
    # enable CORS; to make more specific, change the origin wildcard
    # to a particular domain name, e.g. "'www.example.com'"
    Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'X-Forwarded-For'"
        AllowOrigin: "'oregonstate.edu'"
        MaxAge: "'600'"
        AllowCredentials: True
    BinaryMediaTypes:
      - image~1gif
      - image~1png
      - image~1jpeg
      - application/octet-stream
      - multipart/form-data
Parameters:
  LambdaCommonLayer:
    Type: String
    Default: arn:aws:lambda:us-west-2:005937143026:layer:LambdaCommonLayer:97
    
Resources:
  test:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: test.test
      Events:
        Building:
          Type: Api
          Properties:
            Path: /test
            Method: get
  SystemTime:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: now.systemtime
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /systemtime
            Method: get
  BuildingAll:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: building.all
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /allbuildings
            Method: get
  BuildingGet:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: building.get
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /building
            Method: get
  BuildingPut:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: building.put
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /building
            Method: put
  BuildingPost:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: building.post
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /building
            Method: post
  BuildingDelete:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: building.delete
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /building
            Method: delete
  MeterGroupGet:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: meter_group.get
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /metergroup
            Method: get
  MeterGroupPut:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: meter_group.put
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /metergroup
            Method: put
  MeterGroupPost:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: meter_group.post
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /metergroup
            Method: post
  MeterGroupDelete:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: meter_group.delete
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /metergroup
            Method: delete
  MeterGet:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: meter.get
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /meter
            Method: get
  MeterData:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: meter.data
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /data
            Method: get
  MeterBatchData:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri:  app/
      Handler: meter.batchData
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /batchData
            Method: get
  MeterPut:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: meter.put
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /meter
            Method: put
  # For newer meter types
  MeterUpload:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 30
      MemorySize: 128
      CodeUri: app/
      Handler: meter.upload
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /upload
            Method: post
  # Legacy Data Upload Route (still works for Aquisuites)
  MeterPost:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 30
      MemorySize: 128
      CodeUri: app/
      Handler: meter.post
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /meter
            Method: post
  MeterDelete:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: meter.delete
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /meter
            Method: delete
  MeterClasses:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: meter.classes
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /meterclasses
            Method: get
  AlertGet:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: alert.get
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /alert
            Method: get
  AlertPost:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: alert.post
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /alert
            Method: post
  AlertPut:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: alert.put
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /alert
            Method: put
  AlertDelete:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: alert.delete
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /alert
            Method: delete
  CampaignGet:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: campaign.get
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /campaign
            Method: get
  CampaignGetAll:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: campaign.all
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /campaigns
            Method: get
  CampaignPut:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: campaign.put
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /campaign
            Method: put
  CampaignPost:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: campaign.post
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /campaign
            Method: post
  CampaignDelete:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: campaign.delete
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /campaign
            Method: delete
  StoryUser:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: story.user
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /userviews
            Method: get
  StoryGet:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: story.get
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /view
            Method: get
  StoryPut:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: story.put
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /view
            Method: put
  StoryPost:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: story.post
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /view
            Method: post
  StoryDelete:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: story.delete
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /view
            Method: delete
  BlockGet:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: block.get
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /block
            Method: get
  BlockPut:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: block.put
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /block
            Method: put
  BlockPost:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: block.post
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /block
            Method: post
  BlockDelete:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: block.delete
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /block
            Method: delete
  ChartGet:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: chart.get
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /chart
            Method: get
  ChartPut:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: chart.put
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /chart
            Method: put
  ChartPost:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: chart.post
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /chart
            Method: post
  ChartDelete:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: chart.delete
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /chart
            Method: delete
  User:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: user.user
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /user
            Method: get
  ImageAll:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: images.all
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /images
            Method: get
  adminUsers:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: admin.users
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /admin/users
            Method: get
  adminDevices:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: app/
      Handler: meter.all
      Layers:
        - !Ref LambdaCommonLayer
        - !Ref EnergyModelLayer
      Events:
        Building:
          Type: Api
          Properties:
            Path: /admin/devices
            Method: get
  EnergyModelLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            LayerName: EnergyModelLayer
            Description: DB Model Defs
            ContentUri: dependencies/
            CompatibleRuntimes:
              - nodejs6.10
              - nodejs8.10
              - nodejs10.x
              - nodejs12.x
            LicenseInfo: 'MIT'
            RetentionPolicy: Retain
